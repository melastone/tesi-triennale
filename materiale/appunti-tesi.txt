// APPUNTI TESI

quello che voglio fare è capire il costo dell'esecuzione di un programma in
termini di gas.
Come programma intendo un programma per ethereum, cioè uno smart contract.
Questi programmi sono scritti in Solidity (lingaggio quasi Turing completo)
e poi tradotti in EVM (che sta per ethereum virtual machine) bytecode.
Girano sulla blockchain in questa forma qui.
Va da se che x fare analisi statica (useremo anche "verifica formale" come
sinonimo) di tali programmi occorre conoscere bene il bytecode, ma
soprattutto formalizzarlo in modo da darlo in pasto ai programmi di analisi
in forma ottimizzata ma corretta (EVM da sé è molto difficile da analizzare,
vedi intr. [1])

/RIELABORAZIONE DELLE FONTI
L'articolo [1] fornisce una panoramica sui tool attualmente esistenti per
fare verifiche formali degli smart contracts. Questi sono suddivisi
in categorie. Noi ci concentriamo sui tool di verifica che permettono di
fare analisi statica.
Particolare attenzione va a KEVM [4]: gli autori propongono una
semantica formale per EVM. KEVM permette di fare analisi statica sia su
programmi scritti in solidity che in EVM bytecode. Fra gli esempi proposti
dagli autori di [4] per dimostrare le possibili applicazioni di KEVM c'è
un tool di analisi per i consumi di gas (pag 11).

Questo lavoro prosegue nell'articolo successivo [2], dove gli stessi autori
propongono un tool completo, EtherTrust, per fare analisi statica di programmi
orientata a verificare le proprietà di sicurezza.

In [3] viene fornito un approccio teorico al calcolo dei consumi di gas
nel caso pessimo. Questo viene fatto fornendo 2 diversi algoritmi.
Non esiste però un'implementazione di questo lavoro, motivo per cui viene
criticato in [5].

Un software interessante è [5]. GASTAP è un prototipo di programma
che nasce con il solo scopo di calcolare i consumi di gas. E' stato implementato
combinando altri tool visti: OYENTE, citato in [1]. EthIR, scaricato
e testato; produce una rappresentazione rule-based del codice dei contratti.
E' implementato dagli stessi autori, gli spagnoli, che collaborano anche
su SACO.

Infine cosa possiamo dire di MadMax [6]? Se vogliamo conoscere la stima
dei consumi in termini di gas è inutile. Più che altro il tool si focalizza
su analizzare e segnalare eventuali vulnerabilità legate al gas.
Viene comunque citato in [5] asssieme a GASPER. Frose è interessante
dare un'occhiata agli approcci che utilizzano nelle loro analisi. Ma nessuno
dei due si occupa di calcolare il gas associato all'esecuzione dei programmi.

Un concetto che è bene afferrare è il seguente: il compilatore di Solidity
(solc) ad ogni compilazione produce un valore che corrisponde al consumo
 di gas effettivo. Facendo dei test quindi può essere utile usare dei programmi
che possono essere compilati (o lo sono già stati). In questo modo riusciamo
a fare un confronto tra l'output prodotto da solc e quello ottenuto dal
tool che stiamo testando.

/SOFTWARE
- ETHER TRUST (solo bytecode): permette di fare un'analisi rigorosa
dei programmi. Deduce solo proprietà di security.
Potrebbe essere utilizzato per altro??
- KEWM (sia Solidity che bytecode): framework per formalizzare la semantica
della EVM. Gli sviluppatori propongono come esempio applicativo un tool
per calcolare i consumi di gas
- GASTAP (sia Solidity che bytecode): nasce sulla base di ethir.
EthIR è un tool che produce una rappresentazione semplificata del data flow
del codice. E' una sorta di decompilatore per EVM bytecode.
Il caso di studio proposto è il calcolo delle invarianti di ciclo.
A pag. 6 viene fatto un cenno al gas-analyzer, nel caso di studio con SACO.
Questo è il tool da utilizzare per ottenere dei bound ai cicli sulla
base dell'output prodotto da EthIR. Nell'articolo, a dimostrare l'utilità
del bound ai cicli, si fa riferimento alle stime di gas consumato.
Per ora, in via sperimentale, c'è un TOOL che lavorando come SACO
produce upper bound ai consumi di gas. Questo è il tool che ci interessa,
ovvero GASTAP. Il software prende in input un contratto e
produce in output un bound - in terminini di gas - per ciascuna delle
funzioni che lo compongono.
-Facciamo ancora ricerca??? Io nella tesi devo fornire una panoramica sui
 software attualmente esistenti. Non posso solo basarmi su quello che viene
 citato negli articoli..
 
/TITOLO
- Studio sull'efficienza di tool per l'analisi statica degli smart contract in Ethereum
- Stimare i consumi di gas nell'esecuzione di Smart Contract in Ethereum
- Analisi statica di Smart Contract in Ethereum: stimare i consumi di gas
- I consumi di gas nell'analisi statica degli Smart Contract in Ethereum

/ABSTRACT
Con la diffusione della blockchain si è resa necessaria l'analisi degli smart
contract in Ethereum, con l'obiettivo di stimarne i costi in termini di gas.
Ad oggi esistono diversi tool che permettono di farlo, sebbene questi
siano lontani dall'essere precisi.
Ci\'o significa che non esiste ancora un modo di conoscere a priori il
costo dell'esecuzione di tali contratti con precisione.
L'obiettivo di questo lavoro è quello di dedurre quanto le previsioni sui
costi siano precise, ma soprattuto quali siano le difficoltà incontrate
nell'analisi dei contratti.
%la prima frase è da articolare. Non dobbiamo mica fare analisi per colpa
della fama della blockchain!!!
%attenta alla parte sui numerosi tool.. quanti esempi hai??

/INTRODUZIONE
- Collochiamo Ethereum nell'ecosistema della blockchain.
- Introduciamo il concetto di smart contract e gas.
- Accenno all'importanza dell'analisi statica di questi programmi
- Qual è l'utilità di prevedere i costi dell'esecuzione?
Sarebbe meglio dilungarsi di più.
Dividere in 4 sottosezioni:
1. Le innovazioni informatiche, a che punto è la cybersecurity?? Diamo una
panoramica del contesto in cui ci troviamo.
2. Cos'è la blockchain? Mi riallaccio alla questione precedente definendola
come un ottimo strumento di cybersecurity.
Cosa sono gli smart contracts? parliamone!
3. All'interno della blockchain concentriamoci sull'ambito delle criptovalute.
Cenni al bitcoin. Introduciamo Ethereum come alternativa.
Parliamo di Ethereum.
4. Tutto il problema del GAS.. cenni bibliografici, vulnerabilità. Più o
meno qui la base di lavoro è buona. Possiamo agg qualcosa?
5. Parlo del mio lavoro.

Il tutto sarebbe meglio per un totale di 5-6 pagine con riferimenti
bibliografici. Cenni al fatto della proof of work e dell'eticità legata
alla stessa (non è ambientale!)
